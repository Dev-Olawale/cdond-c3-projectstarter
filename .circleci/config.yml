version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
         name: Destroy environment
         when: on_fail
         command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build front-end
          command: |
            cd backend
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [frontend-test]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-test]
      - run:
          name: test-backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [frontend-scan]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-scan]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical


  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run: yum -y install tar gzip
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #               aws cloudformation deploy \
  #               --template-file .circleci/files/backend.yml \
  #               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #               --tags project=udapeople

  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #               aws cloudformation deploy \
  #               --template-file .circleci/files/frontend.yml \
  #               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #               --tags project=udapeople
              
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #               aws ec2 describe-instances \
  #               --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #               --output text >> .circleci/ansible/inventory.txt
  #               cat .circleci/ansible/inventory.txt

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt

  #     - destroy_environment

      # Here's where you will add some code to rollback on failure      

  # configure-infrastructure:
  #   docker:
  #    - image: python:3.7-alpine3.11
  #    - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #        fingerprints: ["3f:81:61:3a:e8:b9:e9:d0:c9:92:5b:3d:01:82:4d:2d"] 

  #     - attach_workspace:
  #         at: ~/

  #     - run:
  #        name: Install dependencies
  #        command: |
  #           # apk add --update ansible
  #           apk add --update curl nodejs npm ansible zip
  #           pip install awscli

  #     - run:
  #        name: Configure server
  #        command: |
  #         cd .circleci/ansible
  #         cat inventory.txt
  #         ansible-playbook -i inventory.txt configure-server.yml

  #   install_ansible:
  #   description: install ansible
  #   steps:
  #     - run:
  #        name: Install ansible
  #        command: |
  #            sudo apt update
  #            sudo apt install software-properties-common -y
  #            sudo add-apt-repository --yes --update ppa:ansible/ansible
  #            sudo apt install ansible -y
          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
    
    