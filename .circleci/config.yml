version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
         name: Destroy environment
         when: on_fail
         command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  
  install_ansible:
    description: install ansible
    steps:
      - run:
         name: Install ansible
         command: |
             sudo apt update
             sudo apt install software-properties-common -y
             sudo add-apt-repository --yes --update ppa:ansible/ansible
             sudo apt install ansible -y       

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs


  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here
  #     workflow_id: 
  #       default: "${CIRCLE_WORKFLOW_ID:0:7}"
  #       type: string

  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         when: on_fail
  #         command: |
  #            SUCCESS = 1
  #            if(( $SUCCESS==1 )); 
  #            then
  #              cd ~/project/backend
  #              npm install
  #              npm run migration:revert
  #            fi


  undo_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build front-end
          command: |
            cd backend
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [frontend-test]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-test]
      - run:
          name: test-backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [frontend-scan]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-scan]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople

      - run:
          name: Ensure front-end infrastructure exist
          command: |
                aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy_environment

      # Here is where you will add some code to rollback on failures .

  configure-infrastructure:
    docker:
      # - image: python:3.7-alpine3.11
      - image: cimg/base:stable

    steps:
      - checkout
      - add_ssh_keys:
         fingerprints: ["3f:81:61:3a:e8:b9:e9:d0:c9:92:5b:3d:01:82:4d:2d"] 

      - attach_workspace:
          at: ~/

      - install_ansible

      # - run:
      #    name: Install dependencies
      #    command: |
      #       # apk add --update ansible
      #       apk add --update curl nodejs npm ansible zip
      #       pip install awscli

      - run:
         name: Configure server
         command: |
          cd .circleci/ansible
          cat inventory.txt
          ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    # Docker image here that supports NodeJSa
    docker: 
     - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt


      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
              curl --insecure https://kvdb.io/UKUEnWq4fvzAJ4xvR2cWiF/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
              
      - destroy_environment
      # - revert_migrations
      - undo_migrations

  # deploy-frontend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl nodejs npm
  #           pip install awscli
  #     - run:
  #         name: Package frontend app
  #         command: |
  #           export API_URL=`cat .circleci/outputs/backend_url.txt`
  #           echo "API_URL: $API_URL"
  #           cd ~/project/frontend
  #           npm i
  #           npm install typescript@rc
  #           npm run build
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/frontend/dist
  #     - destroy_environment
  #         # workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - undo_migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-2311608593${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment
      - undo_migrations

  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl nodejs npm ansible zip
  #           pip install awscli
  #     - run:
  #         name: Build backend app
  #         command: |
  #           cd ~/project/backend
  #           npm i
  #           npm run build 
  #           cd dist
  #           cp ../package.json .
  #           zip -rq dist.zip *
  #           mkdir -p ~/project/.circleci/ansible/roles/deploy_backend/files/
  #           mv dist.zip ~/project/.circleci/ansible/roles/deploy_backend/files/
  #     - add_ssh_keys:
  #         fingerprints: [ "3f:81:61:3a:e8:b9:e9:d0:c9:92:5b:3d:01:82:4d:2d" ]
  #     - run:
  #         name: Setup EC2 instance & copy compiled backend to the EC2 instance
  #         command: |
  #           ls ~/project/.circleci/ansible/roles/deploy_backend/files/
  #           cd ~/project/backend
  #           ansible-galaxy install weareinteractive.environment
  #           ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/playbook.yml
  #     # - destroy_environment:
  #     #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - undo_migrations

    # docker:
    #   # Docker image here that supports AWS CLI
    # steps:
    #   # Checkout code from git
    #   - run:
    #       name: Install dependencies
    #       command: |
    #         # your code here
    #   - run:
    #       name: Get backend url
    #       command: |
    #         # your code here
    #         export API_URL="http://${BACKEND_IP}:3030"
    #         echo "${API_URL}"
    #   - run:
    #       name: Deploy frontend objects
    #       command: |
    #         # your code here
      # Here's where you will add some code to rollback on failure s     

  # test
          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]